import React, { useState, useEffect } from 'react';
import { Play, Pause, RotateCcw } from "lucide-react";

function Timer() {
  const [seconds, setSeconds] = useState(1500); // Default: 25 minutes
  const [isActive, setIsActive] = useState(false);
  const [inputMinutes, setInputMinutes] = useState('');
  const [breakMinutes, setBreakMinutes] = useState('5');
  const [cycles, setCycles] = useState(3);
  const [currentCycle, setCurrentCycle] = useState(1);
  const [isBreak, setIsBreak] = useState(false);
  const [totalCycles, setTotalCycles] = useState(3);

  useEffect(() => {
    let interval = null;

    if (isActive && seconds > 0) {
      interval = setInterval(() => {
        setSeconds(seconds => seconds - 1);
      }, 1000);
    } else if (seconds === 0 && isActive) {
      setIsActive(false);
      const notification = new Audio("https://assets.mixkit.co/active_storage/sfx/2869/2869-preview.mp3");
      notification.play().catch(console.error);

      document.querySelector('.timer-container').classList.add('shake');
      setTimeout(() => {
        document.querySelector('.timer-container').classList.remove('shake');
      }, 500);

      if (isBreak) {
        if (currentCycle < totalCycles) {
          setCurrentCycle(prev => prev + 1);
          setIsBreak(false);
          setSeconds(inputMinutes ? parseInt(inputMinutes) * 60 : 1500);
          setIsActive(true);
        } else {
          resetTimer();
        }
      } else {
        setIsBreak(true);
        setSeconds(parseInt(breakMinutes) * 60);
        setIsActive(true);
      }
    }

    return () => clearInterval(interval);
  }, [isActive, seconds, currentCycle, totalCycles, isBreak, inputMinutes, breakMinutes]);

  const formatTime = () => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
  };

  const startTimer = () => {
    if (seconds > 0) setIsActive(true);
  };

  const pauseTimer = () => {
    setIsActive(false);
  };

  const resetTimer = () => {
    setIsActive(false);
    setSeconds(inputMinutes ? parseInt(inputMinutes) * 60 : 1500);
    setIsBreak(false);
    setCurrentCycle(1);
  };

  const setPresetTime = (minutes) => {
    setInputMinutes(minutes.toString());
    setSeconds(minutes * 60);
    setIsActive(false);
    setIsBreak(false);
    setCurrentCycle(1);
  };

  const handleTimeInput = () => {
    const minutes = parseInt(inputMinutes);
    if (!isNaN(minutes) && minutes > 0) {
      setSeconds(minutes * 60);
      setIsActive(false);
    } else {
      console.warn('Please enter a valid number of minutes (greater than 0)');
    }
    setInputMinutes(minutes.toString());
    setBreakMinutes('5');
    setTotalCycles(3);
    setCycles(3);
    setSeconds(minutes * 60);
    setIsActive(false);
    setIsBreak(false);
    setCurrentCycle(1);
  };

  return (
    <div className="space-y-6 timer-container">
      <h1 className="text-2xl font-bold text-center mb-6">Aura Focus Timer</h1>
      <div className="text-center">
        <p className="text-sm text-muted-foreground mb-2">
          {isBreak ? 'Break Time' : 'Work Time'} - Cycle {currentCycle} of {totalCycles}
        </p>
        <div className="text-6xl font-mono text-center">
          {formatTime()}
        </div>
      </div>

      <div className="space-y-4">
        <div className="flex flex-col items-center gap-4">
          <div className="flex items-center gap-2">
            <input
              type="number"
              min="1"
              placeholder="Work minutes"
              className="border rounded p-2 w-32 text-center bg-background text-foreground"
              value={inputMinutes}
              onChange={(e) => {
                const value = e.target.value;
                if (value === '' || parseInt(value) > 0) {
                  setInputMinutes(value);
                }
              }}
            />
            <input
              type="number"
              min="1"
              placeholder="Break minutes"
              className="border rounded p-2 w-32 text-center bg-background text-foreground"
              value={breakMinutes}
              onChange={(e) => {
                const value = e.target.value;
                if (value === '' || parseInt(value) > 0) {
                  setBreakMinutes(value);
                }
              }}
            />
            <button type="button" onClick={handleTimeInput} className="border rounded p-2">
              Set Timer
            </button>
          </div>

          <div className="flex gap-2">
            <button type="button" onClick={() => setPresetTime(10)} className="border rounded p-2">
              10 min
            </button>
            <button type="button" onClick={() => setPresetTime(15)} className="border rounded p-2">
              15 min
            </button>
            <button type="button" onClick={() => setPresetTime(20)} className="border rounded p-2">
              20 min
            </button>
          </div>

          <div className="flex items-center gap-2">
            <span>Cycles:</span>
            <select
              className="border rounded p-2 bg-background text-foreground"
              value={cycles}
              onChange={(e) => {
                const value = parseInt(e.target.value);
                setCycles(value);
                setTotalCycles(value);
              }}
            >
              {[2, 3, 4, 5].map(num => (
                <option key={num} value={num}>{num}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="flex justify-center gap-2">
          <button
            type="button"
            onClick={isActive ? pauseTimer : startTimer}
            disabled={seconds === 0}
            className="border rounded p-2 flex items-center"
          >
            {isActive ? (
              <>
                <Pause className="h-4 w-4 mr-2" />
                Pause
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" />
                Start
              </>
            )}
          </button>
          <button
            type="button"
            onClick={resetTimer}
            className="border rounded p-2 flex items-center"
          >
            <RotateCcw className="h-4 w-4 mr-2" />
            Reset
          </button>
        </div>
      </div>
    </div>
  );
}

export default Timer;
